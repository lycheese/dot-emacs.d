#+TITLE: Doom Emacs Configuration
* Evil
Get back Emacs bindings in insert state:
#+begin_src elisp
(setq! evil-disable-insert-state-bindings t)

(map! :after evil-org
      :map evil-org-mode-map
      :i "C-h" nil)
#+end_src

Make multi-line edits with V->I work:
#+begin_src elisp
(setq! evil-respect-visual-line-mode nil)
#+end_src
* Font
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ ~doom-font~
+ ~doom-variable-pitch-font~
+ ~doom-big-font~ -- used for ~doom-big-font-mode~; use this for presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
#+begin_src elisp :tangle no :eval no
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+end_src

Personal font config with pcase and hostname detection:
#+begin_src elisp
(pcase (system-name)
  ("nanocore" (setq doom-font (font-spec :family "Hack Nerd Font Mono" :size 13.0)))
  ("nanoforge" (setq doom-font (font-spec :family "Hack Nerd Font Mono" :size 13.0)))
  ("nanorocket" (setq doom-font (font-spec :family "FiraCode Nerd Font Mono" :size 24.0)))
  ("pop-os" (setq doom-font (font-spec :family "Fira Code" :size 13.0)))
  (_ (message "No font for this hostname defined")))
#+end_src
* Formatting
** Dockerfile
Disable Dockerfile formatting (it just makes my files less readable):
#+begin_src elisp
(setq-hook! 'dockerfile-mode-hook +format-with :none)
#+end_src
** Nix
Adding a new formatter for nix-mode:
#+begin_src elisp
(set-formatter! 'nixpkgs-fmt "nixpkgs-fmt" :modes '(nix-mode))
#+end_src
* Gnus
Nothing to see here yet really.
#+begin_src elisp
(use-package! gnus
  :config
  (setq gnus-select-method '(nnnil nil)))
#+end_src
* Hyperbole
Still trying to find out why and when I would use Hyperbole…
#+begin_src elisp
(use-package! hyperbole
  :bind ("C-h h". hyperbole)
  :bind* (("M-<RET>" . hkey-either )
          ("M-∃" . action-key)
          ("M-ℕ" . assist-key)))
#+end_src
* Identity
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
#+begin_src elisp
(setq user-full-name "Elia Nolz"
      user-mail-address "elia@nolz.org")
#+end_src
* Keybindings
Emulating helm behaviour since it meshes nicely with the bone keyboard layout:
#+begin_src elisp
(map! :map ivy-minibuffer-map "<right>" 'ivy-alt-done)
#+end_src

Easier binding for ~other-window~ (=C-CAPS-p= in QWERTY, =C-M3-w= in bone):
#+begin_src elisp
(map! :g "C-&" 'other-window)
#+end_src

Easier binding for =C-x= (=C-c= in QWERTY):
#+begin_src elisp
(map! :map key-translation-map "C-ü" "C-x")
#+end_src

Make bone work with feature/pgtk:
#+begin_src elisp
(put 'none 'modifier-value 0)
(setq x-hyper-keysym 'none)
#+end_src

Make org-agenda and org-capture quicker to open:
#+begin_src elisp
(map! :g "C-c a" 'org-agenda-list
      :g "C-c c" 'org-capture)
#+end_src

Make less akward bindings for =gsj= and =gsk= (though =gs<SPC>= is better in every way):
#+begin_src elisp
(map! :nv "g s <down>" 'evilem-motion-next-line
      :nv "g s <up>" 'evilem-motion-previous-line
      :nv "g s i" 'evilem-motion-next-line
      :nv "g s r" 'evilem-motion-previous-line)
#+end_src

Make avy be nicer with bone:
#+begin_src elisp
(after! avy
  :config
  (setq avy-keys '(?c ?t ?i ?e ?n ?r ?s ?g)))
#+end_src

Make ace-window nicer with bone:
#+begin_src elisp
(after! ace-window
  (setq aw-keys '(?t ?i ?e ?r ?s ?g)))
#+end_src

Make evil snipe nice to work with:
#+begin_src elisp
(map! :nv "ü" 'evil-snipe-repeat)
#+end_src

Make accessible keybindings for ~org-schedule~ and other commands that read a date:
#+begin_src elisp
(map! :map org-read-date-minibuffer-local-map
      :g "C-<left>" (lambda () (interactive) (org-eval-in-calendar
                                              '(calendar-backward-day 1)))
      :g "C-<right>" (lambda () (interactive) (org-eval-in-calendar
                                               '(calendar-forward-day 1)))
      :g "C-<up>" (lambda () (interactive) (org-eval-in-calendar
                                            '(calendar-backward-week 1)))
      :g "C-<down>" (lambda () (interactive) (org-eval-in-calendar
                                              '(calendar-forward-week 1))))
#+end_src
* Line numbers
This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to ~relative~.
#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src
* Mouse highlight
#+begin_src elisp
(setq mouse-highlight nil)
#+end_src
* mu4e
#+begin_src elisp
(unless (string-equal (system-name) "pop-os")
  (add-to-list 'load-path "/run/current-system/sw/share/emacs/site-lisp/mu4e/"))

(set-email-account! "lycheese-mailo"
                    '((mu4e-sent-folder   . "/lycheese-mailo/sent")
                      (mu4e-drafts-folder . "/lycheese-mailo/draftbox")
                      (mu4e-trash-folder  . "/lycheese-mailo/Trash")
                      (smtpmail-smtp-user . "fixme")))
(set-email-account! "uni"
                    '((mu4e-sent-folder      . "/nb191/Sent")
                      (mu4e-drafts-folder    . "/nb191/Drafts")
                      (mu4e-trash-folder     . "/nb191/Trash")
                      (smtpmail-smtp-user    . "nb191@stud.uni-heidelberg.de")
                      (smtpmail-smtp-server  . "mail.urz.uni-heidelberg.de")
                      (smtpmail-smtp-service . 587)))
#+end_src
* Org
#+begin_src elisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
#+end_src

#+begin_src elisp :noweb yes
;;; Org
(after! org
  ;; General org settings
  (setq org-log-into-drawer t
        org-id-link-to-org-use-id 'use-existing
        org-startup-folded t
        evil-org-special-o/O '(table-row item))

  ;; Org agenda settings
  (setq org-agenda-files (cl-remove-if (lambda (x) (string-match "fs[567]" x)) (directory-files-recursively org-directory "org$"))
        org-agenda-span 'day
        org-agenda-start-day nil)
  (add-to-list 'org-modules 'org-habit)
  (general-advice-add '(org-agenda-quit org-agenda-switch-to) :before 'org-save-all-org-buffers)

  <<org-super-agenda-config>>

  ;; Org archive settings
  (setq org-archive-location "~/org/archive.org::* From %s")

  ;; Org capture templates
  <<org-capture-templates>>

  ;; Org todo keywords
  <<org-todo-states>>)
#+end_src
** org-todo-states
#+name: org-todo-states
#+begin_src elisp :tangle no
(setq org-todo-keywords '((sequence "TODO(t)"
                                    "PROJ(p)"
                                    "STRT(s@)"
                                    "WAIT(w@/!)"
                                    "HOLD(h@/!)"
                                    "IDEA(i)"
                                    "FILE(f@)"
                                    "|"
                                    "DONE(d!)"
                                    "KILL(k@)")
                          (sequence "[ ](T)"
                                    "[-](S)"
                                    "[?](W)"
                                    "|"
                                    "[X](D)")
                          (sequence "|"
                                    "OKAY(o)"
                                    "YES(y)"
                                    "NO(n)")))

(add-to-list 'org-todo-keyword-faces '("FILE" . +org-todo-active))
#+end_src
** org-super-agenda
#+name: org-super-agenda-config
#+begin_src elisp :tangle no
(use-package org-super-agenda
    :hook (org-agenda-mode . org-super-agenda-mode)
    :init
    (setq org-super-agenda-groups
          '((:name "Habits"
             :habit t
             :order 2)
            (:name "Today"
             :time-grid t
             :todo "TODAY"
             :scheduled today
             :order 1)
            (:name "Important"
             :tag "Important"
             :tag "Family"
             :order 1)
            (:name "Critically overdue"
             :and (:deadline past
                   :not (:todo "FILE"))
             :order 0)
            (:name "Overdue Uni Stuff"
             :and (:scheduled past
                   :tag "Uni"
                   :not (:todo "FILE"))
             :order 3)
            (:name "Uni Stuff to be filed"
             :and (:tag "Uni"
                   :todo "FILE")
             :order 4)
            (:name "University Stuff"
             :tag "Uni"
             :order 3)
            (:name "Completed projects that still need to be filed away"
             :todo "FILE"
             :order 95)
            (:name "Scheduled Projects"
             :todo "PROJ"
             :order 97)
            (:name "Emacs Stuff"
             :tag "Emacs"
             :order 98)
            (:name "Reading"
             :tag "Books"
             :order 96)
            (:name "Overdue"
             :and  (:scheduled past
                    :not (:todo "PROJ"))
             :order 1)))
    :config
    (setq org-super-agenda-header-map (make-sparse-keymap)))
#+end_src
** org-capture-templates
#+name: org-capture-templates
#+begin_src elisp :tangle no :noweb yes
(setq org-capture-templates
      '(;; Noweb import of the respective templates
        <<org-capture-tasks>>

        <<org-capture-projects>>

        <<org-capture-notes>>

        <<org-capture-anki>>

        <<org-capture-contacts>>

        <<org-capture-japanese>>))
#+end_src
*** org-capture-tasks
#+name: org-capture-tasks
#+begin_src elisp :tangle no
("t" "Tasks")
("tt" "Task for today" entry
 (file+olp+datetree "notes.org")
 "* %^{Select type|TODO|WAIT|HOLD|KILL|DONE} %^{Task} %^G\n SCHEDULED: %t\n%?\nAdded: %U")
("ts" "Scheduled task" entry
 (file+olp+datetree "notes.org")
 "* %^{Select type|TODO|WAIT|HOLD|KILL|DONE} %^{Task} %^G\n SCHEDULED: %^t\n%?\nAdded: %U")
("td" "Scheduled task with deadline" entry
 (file+olp+datetree "notes.org")
 "* %^{Select type|TODO|WAIT|HOLD|KILL|DONE} %^{Task} %^G\n DEADLINE: %^t\n%?\nAdded: %U")
("tn" "Not scheduled task" entry
 (file+olp+datetree "notes.org")
 "* %^{Select type|TODO|WAIT|HOLD|KILL|DONE} %^{Task} %^G\n%?\nAdded: %U")
#+end_src
*** org-capture-projects
#+name: org-capture-projects
#+begin_src elisp :tangle no
("p" "Project" entry
 (file+olp+datetree "notes.org")
 "* PROJ %^{Project} %^G\n%?\nAdded: %U")
#+end_src
*** org-capture-notes
#+name: org-capture-notes
#+begin_src elisp :tangle no
("n" "Notes" entry
 (file+olp+datetree "notes.org")
 "* %U %^{Title} %^G\n%?")
#+end_src
*** org-capture-anki
#+name: org-capture-anki
#+begin_src elisp :tangle no
("a" "Anki Cards")
("ab" "Anki Basic Block I" entry
 (file+olp+datetree "anki.org" "Block I")
 "* %<%H:%M:%S>  %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Org-Import\n:ANKI_DECK: Block I\n:ANKI_TAGS: FS7\n:END:\n** Front\n%?\n** Back\n%i")
#+end_src
*** org-capture-contacts
#+name: org-capture-contacts
#+begin_src elisp :tangle no
("c" "Contacts")
("cp" "Private contact" entry
 (file+olp "contacts.org" "Kontakte" "Privat")
 "* %^{Name}\n Email: %^{Email}\nTelephone: %^{Telephone number}\n** TODO Geburtstag von %\\1\nSCHEDULED: %^{Birthday}t"
 :immediate-finish t)
("cf" "Family contact" entry
 (file+olp "contacts.org" "Kontakte" "Familie")
 "* %^{Name}\n Email: %^{Email}\nTelephone: %^{Telephone number}\n** TODO Geburtstag von %\\1\nSCHEDULED: %^{Birthday}t"
 :immediate-finish t)
("cw" "Work contact" entry
 (file+olp "contacts.org" "Kontakte" "Arbeit")
 "* %^{Name}\n Email: %^{Email}\nTelephone: %^{Telephone number}\n** TODO Geburtstag von %\\1\nSCHEDULED: %^{Birthday}t"
 :immediate-finish t)
("co" "Other contacts" entry
 (file+olp "contacts.org" "Kontakte" "Andere")
 "* %^{Name}\n Email: %^{Email}\nTelephone: %^{Telephone number}\n** TODO Geburtstag von %\\1\nSCHEDULED: %^{Birthday}t"
 :immediate-finish t)
("cn" "New contact template" entry
 (file+olp "contacts.org" "Kontakte" "Testbereich")
 "* %^{Name}\n:PROPERTIES:\n:EMAIL: %^{Email}\n:PHONE: %^{Telefon}\n:ALIAS: %^{Alias}\n:ADDRESS: %^{Adresse}\n:END:\n** TODO Geburtstag von %\\1\nSCHEDULED:%^{Geburtstag}t %?")
#+end_src
*** org-capture-japanese
#+name: org-capture-japanese
#+begin_src elisp :tangle no
("j" "Japanese vocab")
("jn" "Japanese noun" entry
 (file+olp+datetree "hobby/japanese.org" "Vocab" "Noun")
 "* %^{Japanese} \[%^{Reading}\] %^g\nTranslation: %^{English}\nNew Kanji?: %^{New Kanji?|Yes|No}\nAdditional stuff: %?")
("jv" "Japanese verb" entry
 (file+olp+datetree "hobby/japanese.org" "Vocab" "Verb")
 "* %^{Japanese} \[%^{Reading}\] %^g\nTranslation: %^{English}\nNew Kanji?: %^{New Kanji?|Yes|No}\nType: %^{Ichidan or Godan?|Ichidan|Godan} and %^{Transitivity|Transitive|Intransitive}\nAdditional stuff: %?")
("ja" "Japanese adjective" entry
 (file+olp+datetree "hobby/japanese.org" "Vocab" "Adjective")
 "* %^{Japanese} \[%^{Reading}\] %^g\nTranslation: %^{English}\nNew Kanji?: %^{New Kanji?|Yes|No}\nType: %^{i-adj or na-adj|i-adj|na-adj}\nAdditional stuff: %?")
("jo" "Other japanese vocab" entry
 (file+olp+datetree "hobby/japanese.org" "Vocab" "Other")
 "* %^{Japanese} \[%^{Reading}\] %^g\nTranslation: %^{English}\nNew Kanji?: %^{New Kanji?|Yes|No}\nAdditional stuff: %?")
#+end_src
* Programming
** julia
#+begin_src elisp
(after! lsp-julia
  (setq lsp-julia-package-dir nil)
  (setq lsp-julia-default-environment "~/.julia/environments/v1.5")
  (setq lsp-enable-folding t))
#+end_src
* Scrolling
#+begin_src elisp :tangle no
(pixel-scroll-mode)
#+end_src
* Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set ~doom-theme~ or manually load a theme with the
~load-theme~ function. This is the default:
#+begin_src elisp
(setq doom-theme 'doom-dracula)
#+end_src
